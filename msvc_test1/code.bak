


	
	//{
	//	xx::Shared<FF::Foo> a;
	//	a.Emplace();asdf
	//	a->children.emplace_back().Emplace();
	//	//om.CoutN(a);

	//	d.Clear();
	//	om.WriteTo(d, a);
	//	//om.CoutN(d);

	//	//d[3] = 1;
	//	//d.len -= 2;
	//	//om.CoutN(d);
	//	auto sec = xx::NowEpochSeconds();
	//	xx::Shared<FF::Foo> b;
	//	auto b_ = xx::MakeScopeGuard([&] { om.RecursiveResetRoot(b); });
	//	for (size_t i = 0; i < 10000000; i++) {
	//		d.offset = 0;
	//		om.ReadFrom(d, b);
	//	}
	//	auto sec2 = xx::NowEpochSeconds();
	//	om.CoutN(sec2 - sec);
	//	om.CoutN(b);
	//}


	//{
	//	xx::Shared<FF::Foo2> a;
	//	a.Emplace();
	//	a->children.emplace_back().Emplace();
	//	//om.CoutN(a);

	//	d.Clear();
	//	om.WriteTo(d, a);
	//	//om.CoutN(d);

	//	//d[3] = 1;
	//	//d.len -= 2;
	//	//om.CoutN(d);
	//	auto sec = xx::NowEpochSeconds();
	//	xx::Shared<FF::Foo2> b;
	//	auto b_ = xx::MakeScopeGuard([&] { om.RecursiveResetRoot(b); });
	//	for (size_t i = 0; i < 10000000; i++) {
	//		d.offset = 0;
	//		om.ReadFrom(d, b);
	//	}
	//	auto sec2 = xx::NowEpochSeconds();
	//	om.CoutN(sec2 - sec);
	//	om.CoutN(b);
	//}






auto f = xx::MakeShared<FF::Foo>();
	auto f_ = xx::MakeScopeGuard([&] { om.KillRecursive(f); });
	f->parent = f;

	auto f2 = xx::MakeShared<FF::Foo2>();
	f->children.emplace_back(f2);
	f2->children.emplace_back(f2);

	auto f3 = om.Clone(f2);
	f->children.emplace_back(f3);

	om.CoutN(om.HasRecursive(f));
	om.CoutN(f);

	xx::Data d;
	om.WriteTo(d, f);
	om.CoutN(d);






#include "FF_class_lite.h"
#include "xx_chrono.h"

template<typename T>
XX_NOINLINE void Test1(xx::ObjManager& om, xx::Data& d, T const& v) {
	auto sec = xx::NowEpochSeconds();
	for (size_t i = 0; i < 10000000; i++) {
		d.Clear();
		om.WriteTo(d, v);
	}
	om.CoutN(xx::NowEpochSeconds() - sec);
	om.CoutN(d);
}

template<typename T>
XX_NOINLINE void Test2(xx::ObjManager& om, xx::Data& d, T& v) {
	auto sec = xx::NowEpochSeconds();
	for (size_t i = 0; i < 10000000; i++) {
		d.offset = 0;
		om.ReadFrom(d, v);
	}
	om.CoutN(xx::NowEpochSeconds() - sec);
	om.CoutN(v);
}

int main() {
	xx::ObjManager om;
	FF::PkgGenTypes::RegisterTo(om);

	xx::Data d;
	d.Reserve(1024);

	{
		auto f = xx::MakeShared<FF::Foo2>();
		f->ptr.Emplace();
		om.CoutN(f);

		Test1(om, d, f);
	}

	{
		xx::ObjBase_s o;
		Test2(om, d, o);
	}









	{
		auto f = xx::MakeShared<FF::Foo>();
		om.CoutN(f);

		om.CoutN(f->rnd.NextDouble());
		om.CoutN(f->rnd.NextDouble());
		om.CoutN(f->rnd.NextDouble());

		om.WriteTo(d, f);
		om.CoutN(d);
	}

	{
		d.Clear();
		d.Fill({ 1, 12, 0, 0, 0, 0 });
		om.CoutN(d);

		xx::ObjBase_s obj;
		om.ReadFrom(d, obj);
		om.CoutN(obj);
		auto f = om.As<FF::Foo>(obj);
		om.CoutN(f->rnd.NextDouble());
		om.CoutN(f->rnd.NextDouble());
		om.CoutN(f->rnd.NextDouble());
	}







#include "FF_class_lite.h"
#include "xx_chrono.h"

int main() {
	xx::ObjManager om;
	FF::PkgGenTypes::RegisterTo(om);
	xx::Data d;
	d.Reserve(1024);

	{
		xx::Shared<FF::Foo> a;
		a.Emplace();
		a->children.emplace_back().Emplace();
		//om.CoutN(a);

		d.Clear();
		om.WriteTo(d, a);
		//om.CoutN(d);

		//d[3] = 1;
		//d.len -= 2;
		//om.CoutN(d);
		auto sec = xx::NowEpochSeconds();
		xx::Shared<FF::Foo> b;
		auto b_ = xx::MakeScopeGuard([&] { om.RecursiveResetRoot(b); });
		for (size_t i = 0; i < 10000000; i++) {
			d.offset = 0;
			om.ReadFrom(d, b);
		}
		auto sec2 = xx::NowEpochSeconds();
		om.CoutN(sec2 - sec);
		om.CoutN(b);
	}


	{
		xx::Shared<FF::Foo2> a;
		a.Emplace();
		a->children.emplace_back().Emplace();
		//om.CoutN(a);

		d.Clear();
		om.WriteTo(d, a);
		//om.CoutN(d);

		//d[3] = 1;
		//d.len -= 2;
		//om.CoutN(d);
		auto sec = xx::NowEpochSeconds();
		xx::Shared<FF::Foo2> b;
		auto b_ = xx::MakeScopeGuard([&] { om.RecursiveResetRoot(b); });
		for (size_t i = 0; i < 10000000; i++) {
			d.offset = 0;
			om.ReadFrom(d, b);
		}
		auto sec2 = xx::NowEpochSeconds();
		om.CoutN(sec2 - sec);
		om.CoutN(b);
	}


	return 0;
}







#include "FF_class_lite.h"
#include "xx_chrono.h"

struct BB {
	xx::Shared<BB> bb;
	BB() {
		bb = this;
	}
	~BB() {
		std::cout << "~BB()" << std::endl;
	}
};

int main() {
	{
		auto b = xx::MakeShared<BB>();
		auto b_ = xx::MakeScopeGuard([&] { b->bb.Reset(); });
	}

	//xx::ObjManager om;
	//FF::PkgGenTypes::RegisterTo(om);

	//auto a = xx::MakeShared<FF::A>();
	//auto b = xx::MakeShared<FF::B>();
	//{
	//	auto secs = xx::NowEpochSeconds();
	//	int ac = 0, bc = 0;
	//	for (size_t i = 0; i < 100000000; i++) {
	//		if (a.As<FF::B>()) ac++;
	//		if (a.As<FF::A>()) bc++;
	//	}
	//	om.CoutN((xx::NowEpochSeconds() - secs), " ", ac, " ", bc);
	//}
	//{
	//	auto secs = xx::NowEpochSeconds();
	//	int ac = 0, bc = 0;
	//	for (size_t i = 0; i < 100000000; i++) {
	//		if (om.As<FF::B>(a)) ac++;
	//		if (om.As<FF::A>(b)) bc++;
	//	}
	//	om.CoutN((xx::NowEpochSeconds() - secs), " ", ac, " ", bc);
	//}

	//std::unordered_map<xx::Shared<int>, int> sints;
	//sints.emplace(xx::MakeShared<int>(1), 1);
	//sints.emplace(xx::MakeShared<int>(2), 2);
	//om.CoutN(sints);

	//{
	//	auto&& a = xx::MakeShared<FF::A>();
	//	auto a_sg = xx::MakeScopeGuard([&] { om.RecursiveResetRoot(a); });
	//	{
	//		a->id = 1;
	//		a->nick = "aaa";
	//		a->parent = a;
	//		a->children.emplace_back(a);	// recursive

	//		auto b = xx::MakeShared<FF::B>();
	//		a->children.emplace_back(b);
	//		b->children.emplace_back(b);	// recursive
	//		{
	//			b->id = 2;
	//			b->parent = b;
	//			b->data.WriteBuf("abcd1234", 8);
	//			b->c.x = 2.1f;
	//			b->c.y = 3.2f;
	//			b->c.targets.emplace_back(a);
	//		}
	//		{
	//			auto&& c = b->c2.emplace();
	//			c.x = 4.1f;
	//			c.y = 5.2f;
	//			c.targets.emplace_back(a);
	//		}
	//		{
	//			auto&& c = b->c3.emplace_back().emplace_back().emplace();
	//			c.x = 6.1f;
	//			c.y = 7.2f;
	//			c.targets.emplace_back(a);
	//			c.targets.emplace_back(b);
	//		}
	//	}
	//	om.CoutN(a);
	//	{
	//		xx::Shared<FF::A> a2;
	//		auto a2_sg = xx::MakeScopeGuard([&] {
	//			om.RecursiveResetRoot(a2);
	//			});
	//		auto secs = xx::NowEpochSeconds();
	//		for (size_t i = 0; i < 10000000; i++) {
	//			om.Clone(a, a2);
	//		}
	//		om.CoutN((xx::NowEpochSeconds() - secs), "\n", a2);
	//	}
	//	{
	//		xx::Data d;
	//		{
	//			auto secs = xx::NowEpochSeconds();
	//			for (size_t i = 0; i < 10000000; i++) {
	//				d.Clear();
	//				om.WriteTo(d, a);
	//			}
	//			om.CoutN((xx::NowEpochSeconds() - secs), "\n", d);
	//			d.Clear();
	//		}
	//		om.WriteTo(d, a);
	//		om.CoutN(d);
	//		xx::Shared<FF::A> a2;
	//		auto b_sg = xx::MakeScopeGuard([&] {
	//			om.RecursiveResetRoot(a2);
	//			});
	//		{
	//			auto secs = xx::NowEpochSeconds();
	//			for (size_t i = 0; i < 10000000; i++) {
	//				d.offset = 0;
	//				if (int r = om.ReadFrom(d, a2)) {
	//					om.CoutN("read from error. r = ", r);
	//				}
	//			}
	//			om.CoutN((xx::NowEpochSeconds() - secs), "\n", d);
	//			d.Clear();
	//		}
	//		om.CoutN(a2);
	//	}
	//}

	return 0;
}




//#include "xx_obj.h"
//#include "xx_chrono.h"


//struct Foo {
//	int n = 1;
//
//	~Foo() {
//		std::cout << "~Foo()" << std::endl;
//	}
//};
//
///*__attribute__ ((noinline))*/ int64_t Test1() {
//	std::vector<xx::Shared<Foo>> c;
//	auto w = c.emplace_back(xx::MakeShared<Foo>()).ToWeak();
//	uint64_t x = 0;
//	for (size_t i = 0; i < 1000000000; i++) {
//		if (auto&& o = w.Lock()) x += o->n;
//		//if (w) x += w->n;
//		if (i == 1000000000 / 2) {
//			std::cout << i << std::endl;
//		}
//		if (i == 999999999) {
//			std::cout << c.size() << std::endl;
//			c.clear();
//			std::cout << c.size() << std::endl;
//		}
//	}
//	return x;
//}

//#include <variant>
//using IFS = std::variant<int, float>;
//
//uint64_t fib(uint64_t x) {
//	if (x < 2) return x;
//	return fib(x - 1) + fib(x - 2);
//}


// for test



//template<typename T, bool needReserve = true, typename ENABLED = std::enable_if_t<std::is_integral_v<T>>>
//__forceinline void WriteVarIntger(char* const& buf, size_t& len, T const& v) {
//	using UT = std::make_unsigned_t<T>;
//	UT u(v);
//	if constexpr (std::is_signed_v<T>) {
//		u = xx::ZigZagEncode(v);
//	}
//	while (u >= 1 << 7) {
//		buf[len++] = char((u & 0x7fu) | 0x80u);
//		u = UT(u >> 7);
//	};
//	buf[len++] = char(u);
//}
//
//template<typename T>
//__forceinline void Write(char* const& buf, size_t& len, T const& v) {
//	if constexpr (xx::IsVector_v<T>) {
//		WriteVarIntger(buf, len, v.size());
//		for (auto&& o : v) {
//			Write(buf, len, o);
//		}
//	}
//	else if constexpr (std::is_same_v<int, T>) {
//		WriteVarIntger(buf, len, v);
//	}
//}
//
//int main() {
//	char buf[1024];
//	size_t len = 0;
//	int i = 0;
//	std::cout << "plz type a int:" << std::endl;
//	std::cin >> i;
//	std::vector<std::vector<std::vector<int>>> v = { {{i}} };
//	auto secs = xx::NowEpochSeconds();
//	for (size_t i = 0; i < 10000000; i++) {
//		len = 0;
//		Write(buf, len, v);
//	}
//	xx::CoutN((xx::NowEpochSeconds() - secs), " ", xx::DataView{ buf, len });

//
//struct A : xx::ObjBase {
//	int id = 0;
//	xx::Weak<A> parent;
//	std::vector<xx::Shared<A>> children;
//	~A() {
//		std::cout << "~A() id = " << id << std::endl;
//	}
//
//	#pragma region overrides
//	inline void Write(xx::ObjManager& o) const override {
//		o.Write(id, parent, children);
//	}
//
//	inline int Read(xx::ObjManager& o) override {
//		return o.Read(id, parent, children);
//	}
//
//	inline void ToString(xx::ObjManager& o) const override {
//		o.Append("{");
//		this->ToStringCore(o);
//		o.Append("}");
//	}
//
//	inline void ToStringCore(xx::ObjManager& o) const override {
//		o.Append("\"id\":", id, ",\"parent\":", parent, ",\"children\":", children);
//	}
//
//	inline void Clone1(xx::ObjManager& o, void* const& tar) const override {
//		auto&& out = (A*)tar;
//		o.Clone1(this->id, out->id);
//		o.Clone1(this->parent, out->parent);
//		o.Clone1(this->children, out->children);
//	}
//
//	inline void Clone2(xx::ObjManager& o, void* const& tar) const override {
//		auto&& out = (A*)tar;
//		o.Clone2(this->id, out->id);
//		o.Clone2(this->parent, out->parent);
//		o.Clone2(this->children, out->children);
//	}
//
//	inline void RecursiveReset(xx::ObjManager& o) override {
//		o.RecursiveReset(this->id, this->parent, this->children);
//	}
//	#pragma endregion
//};

//template<>
//struct xx::TypeId<A> {
//	static const uint16_t value = 1;
//};

//int main() {

	//xx::ObjManager om;
	//xx::Data d;
	//d.Reserve(1024);
	//using T = std::string;
	//T i;
	//std::cout << "plz input:" << std::endl;
	//std::cin >> i;
	//std::vector<std::vector<std::vector<T>>> v = { {{i}} };
	////auto& vs = v[0][0];
	////for (size_t j = 0; j < 100; j++) {
	////	ints.emplace_back(i);
	////}
	//om.data = &d;
	//{
	//	auto secs = xx::NowEpochSeconds();
	//	for (size_t i = 0; i < 10000000; i++) {
	//		d.Clear();
	//		om.Write(v);
	//	}
	//	xx::CoutN((xx::NowEpochSeconds() - secs), " ", d);
	//}

	//size_t input;
	//std::cin >> input;

	//for (size_t i = 0; i < 10; i++)
	//{
	//	auto secs = xx::NowEpochSeconds();
	//	auto res = fib(input);
	//	std::cout << (xx::NowEpochSeconds() - secs) << std::endl;
	//	std::cout << res << std::endl;
	//}
	//return 0;

	//size_t numInts = 0, numFloats = 0;
	//std::cout << "plz input numInts  numFloats: " << std::endl;
	//std::cin >> numInts >> numFloats;
	//std::cout << numInts << "," << numFloats << std::endl;

	//std::vector<IFS> vars;
	//vars.reserve(numInts + numFloats);
	//for (size_t i = 0; i < numInts; i++) {
	//	vars.emplace_back((int)1);
	//}
	//for (size_t i = 0; i < numFloats; i++) {
	//	vars.emplace_back((float)1.1);
	//}

	//for (size_t i = 0; i < 10; i++)
	//{
	//	auto secs = xx::NowEpochSeconds();
	//	size_t counts0{};
	//	double counts1{};
	//	for (auto&& v : vars) {
	//		switch (v.index()) {
	//		case 0:
	//			counts0 += *(int*)&v;
	//			break;
	//		case 1:
	//			counts1 += *(float*)&v;
	//			break;
	//		}
	//	}
	//	std::cout << (xx::NowEpochSeconds() - secs) << std::endl;
	//	std::cout << counts0 << "," << counts1 << std::endl;
	//}


	//{
	//	auto secs = xx::NowEpochSeconds();
	//	auto x = Test1();
	//	xx::CoutN(xx::NowEpochSeconds() - secs, " ", x);
	//}




	//xx::Data d;

	//{
	//	auto secs = xx::NowSteadyEpochSeconds();
	//	for (size_t i = 0; i < 10000000; i++) {
	//		d.Clear();
	//		om.WriteTo(d, a);
	//	}
	//	om.CoutN((xx::NowSteadyEpochSeconds() - secs), " ", d);
	//}
	//{
	//	auto secs = xx::NowSteadyEpochSeconds();
	//	xx::ObjBase_s o;
	//	for (size_t i = 0; i < 10000000; i++) {
	//		d.offset = 0;
	//		om.ReadFrom(d, o);
	//	}
	//	om.CoutN((xx::NowSteadyEpochSeconds() - secs), " ", o.As<A>()->children.size());
	//}


	//try {
	//	auto c = xx::MakeShared<int>(2);
	//	auto wc = c.ToWeak();
	//	std::cout << wc.Lock().Value() << std::endl;
	//	c.Reset();
	//	std::cout << wc.Lock().Value() << std::endl;
	//}
	//catch (std::exception const& ex) {
	//	std::cout << ex.what() << std::endl;
	//}

	//	{
	//		auto secs = xx::NowSteadyEpochSeconds();
	//		auto c = xx::MakeShared<int>(1);
	//		auto d = c.ToWeak();
	//		c.Reset();
	//		int x = 0;
	//		for (size_t i = 0; i < 1000000; i++) {
	//			try {
	//				x += d.Lock().Value();
	//			}
	//			catch (...) {
	//			}
	//		}
	//		std::cout << (xx::NowSteadyEpochSeconds() - secs) << " " << x << std::endl;
	//	}


	//__builtin_trap();
//	return 0;
//}







#include "xx_ptr.h"
#include "xx_data.h"
#include "xx_string.h"
#include <iostream>
#include <vector>

template<typename T>
void Save(xx::Data& d, xx::Shared<T> const& v);

struct A {
    static const uint32_t typeId = 1;

    xx::Weak<A> parent;
    std::vector<xx::Shared<A>> children;

    virtual void SaveTo(xx::Data& d) {
        Save(d, parent.Lock());
        d.WriteVarIntger(children.size());
        for (auto&& o : children) {
            Save(d, o);
        }
    }
};
struct B : A {
    static const uint32_t typeId = 2;

    uint32_t abc = 3;

    void SaveTo(xx::Data& d) override {
        Save(d, parent.Lock());
        d.WriteVarIntger(children.size());
        for (auto&& o : children) {
            Save(d, o);
        }
    }
};

struct SaveContext {
    size_t baseLen;
    std::vector<void*> ptrs;
    SaveContext(xx::Data& d) {
        baseLen = d.len;
        d.ud = this;
    }
    ~SaveContext() {
        for (auto&& p : ptrs) {
            *(int*)p = 0;
        }
    }
};

template<typename T>
void Save(xx::Data& d, xx::Shared<T> const& v) {

    auto typeId = v.typeId();
    d.WriteVarIntger(typeId);
    if (typeId == 0) return;

    auto&& h = xx::GetPtrHeader(v.pointer);
    auto&& c = (SaveContext*)d.ud;

    if (h.offset == 0) {
        h.offset = (uint32_t)(d.len - c->baseLen);
        c->ptrs.push_back(&h.offset);
        d.WriteVarIntger(h.offset);
        v.pointer->SaveTo(d);
    }
    else {
        d.WriteVarIntger(h.offset);
    }
}

int main() {
    // make data: A(A)-BB
    auto&& a = xx::MakeShared<A>();
    a->parent = a;
    a->children.push_back(xx::MakeShared<B>());
    a->children.push_back(xx::MakeShared<B>());

    xx::Data d;

    // serialize
    {
        SaveContext sc(d);
        Save(d, a);
    }

    xx::CoutN(d);

    return 0;
}









//#include "xx_ptr.h"
//#include <iostream>
//#include <vector>
//
//struct A {};
//struct B : A {};
//
//int main() {
//    xx::Shared<A> a = xx::MakeShared<B>();
//    std::cout << a.useCount() << " " << a.refCount() << std::endl;
//    auto b = a.As<B>();
//    if (b) {
//        std::cout << a.useCount() << " " << a.refCount() << std::endl;
//    }
//    xx::Weak<A> wa = b;
//    std::cout << a.useCount() << " " << a.refCount() << std::endl;
//    b = wa.Lock().As<B>();
//    std::cout << wa.useCount() << " " << wa.refCount() << std::endl;
//    a.Reset();
//    std::cout << wa.useCount() << " " << wa.refCount() << std::endl;
//    b.Reset();
//    std::cout << wa.useCount() << " " << wa.refCount() << std::endl;
//    wa.Reset();
//    std::cout << wa.useCount() << " " << wa.refCount() << std::endl;
//    return 0;
//}












//#include "xx_ptr.h"
//#include <iostream>
//#include <vector>
//
//struct Foo {
//    std::vector<xx::Weak<Foo>> parent;
//    std::vector<xx::Shared<Foo>> childs;
//    Foo() {
//        std::cout << "Foo" << std::endl;
//    }
//
//    void Test() {
//        std::cout << "Test" << std::endl;
//    }
//
//    ~Foo() override {
//        std::cout << "~Foo" << std::endl;
//    }
//};
//
//int main() {
//    xx::Shared<Foo> sf;
//    sf.Make();
//    sf->childs.push_back(xx::MakeShared<Foo>());
//    sf->childs.push_back(xx::MakeShared<Foo>());
//    xx::Weak<Foo> wf(sf);
//    xx::Weak<Foo> wf2;
//    wf2 = sf;
//    sf.Reset();
//    auto&& sf2 = wf.Lock();
//    std::cout << sf2.Empty() << std::endl;
//    std::cout << wf.useCount() << std::endl;
//    std::cout << wf2.refCount() << std::endl;
//    wf.Reset();
//    std::cout << wf.useCount() << std::endl;
//    std::cout << wf2.refCount() << std::endl;
//    wf2.Reset();
//    std::cout << wf.useCount() << std::endl;
//    std::cout << wf2.refCount() << std::endl;
//
//    return 0;
//}














//#include <iostream>
//#include <string>
//#include <memory>
//
//int main() {
//	auto len = 1024LL * 1024 * 1024 * 5;
//	auto a = new uint8_t[len];// { 0 };
//	size_t count = 0;
//	for (size_t i = 0; i < len; i += 4096) {
//		count += a[i];
//	}
//	std::cout << count << std::endl;
//	std::cin.get();
//	return 0;
//}


//#include <iostream>
//#include <string>
//#include <memory>
//#include <asio.hpp>
//
//int main() {
//	try {
//		char d[2048];
//		asio::io_context ioc(1);
//		asio::ip::udp::socket us(ioc, asio::ip::udp::endpoint(asio::ip::udp::v4(), 12345));
//		asio::ip::udp::endpoint ep;
//		std::function<void(const asio::error_code& e, size_t recvLen)> f;
//		f = [&](auto&& e, auto&& recvLen) {
//			if (!e) {
//				if (recvLen) {
//					us.send_to(asio::buffer(d, recvLen), ep);
//					//us.async_send_to(asio::buffer(d, recvLen), ep, [&](const asio::error_code& e, size_t sentLen) {
//					//	us.async_receive_from(asio::buffer(d), ep, f);
//					//});
//				}
//				//else
//				us.async_receive_from(asio::buffer(d), ep, f);
//			}
//		};
//		f({}, 0);
//		ioc.run();
//	}
//	catch (std::exception& e) {
//		std::cerr << e.what() << std::endl;
//	}
//	return 0;
//}



//// test client
//#include <iostream>
//#include <string>
//#include <memory>
//#include <chrono>
//#include <asio.hpp>
//
////socket.non_blocking(true);
////size_t len = 0;
////error = boost::asio::error::would_block;
////while (error == boost::asio::error::would_block)
//////do other things here like go and make coffee
////len = socket.receive_from(boost::asio::buffer(recv_buf), sender_endpoint, 0, error);
////std::cout.write(recv_buf.data(), len);
//
//int main() {
//    std::cout << "begin" << std::endl;
//    try {
//        asio::io_context ioc;
//        asio::ip::udp::socket us(ioc, asio::ip::udp::endpoint(asio::ip::udp::v4(), 0));
//        us.non_blocking(true);
//        std::cout << "asdf" << std::endl;
//        char d[2048];
//
//        auto &&tar = asio::ip::udp::endpoint(asio::ip::address::from_string("10.0.0.13"), 12333);
//        us.send_to(asio::buffer("asdf", 4), tar);
//        std::cout << "qwer" << std::endl;
//        size_t len = 0;
//        asio::error_code error;
//        asio::ip::udp::endpoint rep;
//        for (int i = 0; i < 10; ++i) {
//            len = us.receive_from(asio::buffer(d), rep, 0, error);
//            if (len) break;
//            //else if (error != asio::error::would_block)
//            std::this_thread::sleep_for(std::chrono::milliseconds(100));
//            std::cout << "i = " << i << std::endl;
//        }
//
//        std::cout << len << std::endl;
//        //ioc.run();
//    }
//    catch (std::exception &e) {
//        std::cerr << e.what() << std::endl;
//    }
//    std::cout << "end" << std::endl;
//    return 0;
//}
//////us.async_receive_from(asio::buffer(d), rep, [&](const asio::error_code& e, size_t recvLen) {
//////	std::cout << "e = " << e << ", recvLen = " << recvLen << std::endl;
//////});








//#include <cstdlib>
//#include <iostream>
//#include <functional>
//#include <asio.hpp>
//
//using asio::ip::udp;
//using namespace std::placeholders;
//
//struct server {
//	server(asio::io_service& io_service, short port)
//		: io_service_(io_service),
//		socket_(io_service, udp::endpoint(udp::v4(), port)) {
//		set_receive_handle();
//	}
//	void set_receive_handle() {
//		socket_.async_receive_from(
//			asio::buffer(data_, max_length), sender_endpoint_,
//			std::bind(&server::handle_receive_from, this, _1, _2));
//	}
//	void handle_receive_from(const asio::error_code& error, size_t bytes_recvd) {
//		if (!error && bytes_recvd > 0) {
//			socket_.async_send_to(
//				asio::buffer(data_, bytes_recvd), sender_endpoint_,
//				bind(&server::handle_send_to, this, _1, _2));
//		}
//		else {
//			set_receive_handle();
//		}
//	}
//	void handle_send_to(const asio::error_code& /*error*/, size_t /*bytes_sent*/) {
//		set_receive_handle();
//	}
//private:
//	asio::io_service& io_service_;
//	udp::socket socket_;
//	udp::endpoint sender_endpoint_;
//	enum { max_length = 1024 };
//	char data_[max_length];
//};
//
//int main(int argc, char* argv[]) {
//	try {
//		asio::io_service io_service;
//		server s(io_service, 12345);
//		io_service.run();
//	}
//	catch (std::exception& e) {
//		std::cerr << "Exception: " << e.what() << "\n";
//	}
//	return 0;
//}







//#include <array>
//#include <asio.hpp>
//#include <iostream>
//#include <thread>
//
//using asio::ip::udp;
//constexpr size_t buffer_size = 4096;
//
//template <typename Storage>
//class callback
//{
//public:
//
//	Storage buffer;
//	udp::endpoint sender_endpoint;
//
//	/* this function is the shim to access the async callback *with* data */
//	template <typename Callback>
//	auto operator()(const asio::error_code& ec, std::size_t bytes, Callback callback) const
//	{
//		auto buffer_begin = std::cbegin(buffer), buffer_end = std::cend(buffer);
//		return callback(sender_endpoint, ec, bytes, buffer_begin,
//			buffer_begin + std::min((std::size_t)std::max(0, (int)std::distance(buffer_begin, buffer_end)), bytes));
//	}
//};
//
//// just a demo callback with access to all the data. *This* is the target for all the surrounding effort!
//template <typename Endpoint, typename Iterator>
//void
//print_to_cout(const Endpoint& endpoint, const asio::error_code& ec, std::size_t bytes, Iterator begin, Iterator end)
//{
//	std::cout << "thread: " << std::this_thread::get_id() << ": Buffer: " << std::string(begin, end) << ", error code: " << ec << ", with " << bytes << " bytes, from endpoint " << endpoint
//		<< std::endl;
//}
//
//class server
//{
//public:
//
//	// the storage for each callback has 4k, we have 10 of them�� should be enough
//	using buffer_t = std::array<char, buffer_size>;
//	using callback_list_t = std::array<callback<buffer_t>, 3>;
//
//private:
//
//	callback_list_t m_callback_list;
//	udp::socket m_socket;
//
//public:
//
//	server(asio::io_service& io_service, short port)
//		: m_socket(io_service, udp::endpoint(udp::v4(), port))
//	{
//		do_receive(m_socket, m_callback_list.begin(), m_callback_list.begin(), m_callback_list.end());
//	}
//
//	/* this is an exercise to pass the data to async_receive_from *without* capturing "this". Since we might call this
//	   recursively, we don't want to rely on "this" pointer. */
//	static void do_receive(udp::socket& socket, callback_list_t::iterator current_callback, callback_list_t::iterator callback_begin,
//		callback_list_t::const_iterator callback_end)
//	{
//		// via the current_callback mechanism, we are able to compartmentalize the storage for each callback
//		socket.async_receive_from(
//			asio::buffer(current_callback->buffer, buffer_size - 1), current_callback->sender_endpoint,
//			[&socket, current_callback, callback_begin, callback_end](const asio::error_code& ec, std::size_t bytes_recvd) {
//				// now, move on to the next storage-and-callback - with wraparound!
//				auto next_callback = current_callback + 1;
//				do_receive(socket, (next_callback != callback_end) ? next_callback : callback_begin, callback_begin, callback_end);
//
//				// call our handler. we need to be sure to have access to the data - but we want to call do_receive as soon as possible!
//				// if this takes too long, you might want to ship this off to a separate thead. Subsequent calls to do_receive are
//				// *not* depending on data in current_callback!
//				(*current_callback)(ec, bytes_recvd, print_to_cout<decltype(current_callback->sender_endpoint), buffer_t::const_iterator>);
//				// since this is an echo service, call do_send() with the same data
//				do_send(socket, current_callback, bytes_recvd);
//			});
//	}
//
//	// do_send is much easier than do_receive - we *have* all the data, we don't need to advance the callback��
//	static void do_send(udp::socket& socket, callback_list_t::iterator current_callback, std::size_t length)
//	{
//		socket.async_send_to(asio::buffer(current_callback->buffer, std::min(length, buffer_size - 1)), current_callback->sender_endpoint,
//			[current_callback](const asio::error_code& ec, std::size_t bytes_sent) {
//				(*current_callback)(ec, bytes_sent,
//					print_to_cout<decltype(current_callback->sender_endpoint), buffer_t::const_iterator>);
//			});
//	}
//};
//
//int
//main(int argc, char* argv[])
//{
//	//if (argc != 2) {
//	//    std::cerr << "Usage: async_udp_echo_server <port>" << std::endl;
//	//    return 1;
//	//}
//
//	asio::io_service io_service;
//
//	server s(io_service, 12345);//std::atoi(argv[1]));
//
//	// now to the fun part - let's call the io_service several times
//	std::thread thread1([&io_service]() { io_service.run(); });
//	std::thread thread2([&io_service]() { io_service.run(); });
//	std::thread thread3([&io_service]() { io_service.run(); });
//	std::thread thread4([&io_service]() { io_service.run(); });
//	thread1.join();
//	thread2.join();
//	thread3.join();
//	thread4.join();
//	return 0;
//}





//#include <iostream>
//#include <string>
//#include <memory>
//#include <asio.hpp>
//using namespace std::placeholders;
//
//struct tcp_connection : public std::enable_shared_from_this<tcp_connection> {
//	typedef std::shared_ptr<tcp_connection> pointer;
//
//	static pointer create(asio::io_context& io_context) {
//		return pointer(new tcp_connection(io_context));
//	}
//	asio::ip::tcp::socket& socket() {
//		return socket_;
//	}
//	void start() {
//		asio::async_write(socket_, asio::buffer("abcdefg"),
//			bind(&tcp_connection::handle_write, shared_from_this(), _1, _2));
//	}
//private:
//	tcp_connection(asio::io_context& io_context) : socket_(io_context) {}
//	void handle_write(const asio::error_code& /*error*/, size_t /*bytes_transferred*/) {}
//	asio::ip::tcp::socket socket_;
//};
//
//struct tcp_server {
//	tcp_server(asio::io_context& io_context) : io_context_(io_context),
//		acceptor_(io_context, asio::ip::tcp::endpoint(asio::ip::tcp::v4(), 12345)) {
//		start_accept();
//	}
//private:
//	void start_accept() {
//		auto new_connection = tcp_connection::create(io_context_);
//		acceptor_.async_accept(new_connection->socket(),
//			bind(&tcp_server::handle_accept, this, new_connection, _1));
//	}
//	void handle_accept(tcp_connection::pointer new_connection, const asio::error_code& error) {
//		if (!error) {
//			new_connection->start();
//		}
//		start_accept();
//	}
//	asio::io_context& io_context_;
//	asio::ip::tcp::acceptor acceptor_;
//};
//
//int main() {
//	try {
//		asio::io_context io_context;
//		tcp_server server(io_context);
//		io_context.run();
//	}
//	catch (std::exception& e) {
//		std::cerr << e.what() << std::endl;
//	}
//	return 0;
//}
